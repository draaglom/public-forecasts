import { addDays, isBefore, isAfter, differenceInDays, parseISO } from 'date-fns'
import { randomBytes } from 'crypto'

// Sourced from https://en.wikipedia.org/wiki/List_of_elected_British_politicians_who_have_changed_party_affiliation
// as of 2024-10-25T21:00Z, with an arbitrary "since the 2001 parliament" cutoff applied".
//
// Note that these are dates of "any" change having happened; sometimes multiple changes happen on the same day and I've chosen to count them as 1.
const dates = [
    "2001-12-10T00:00:00.000Z",
    "2002-10-01T23:00:00.000Z",
    "2003-06-22T23:00:00.000Z",
    "2003-10-22T23:00:00.000Z",
    "2004-01-09T00:00:00.000Z",
    "2004-01-25T00:00:00.000Z",
    "2004-01-25T00:00:00.000Z",
    "2004-03-30T23:00:00.000Z",
    "2004-12-10T00:00:00.000Z",
    "2005-01-15T00:00:00.000Z",
    "2005-02-03T00:00:00.000Z",
    "2005-03-07T00:00:00.000Z",
    "2005-03-18T00:00:00.000Z",
    "2005-03-25T00:00:00.000Z",
    "2005-04-05T23:00:00.000Z",
    "2005-04-24T23:00:00.000Z",
    "2006-10-19T23:00:00.000Z",
    "2007-06-25T23:00:00.000Z",
    "2007-09-15T23:00:00.000Z",
    "2007-09-24T23:00:00.000Z",
    "2008-01-29T00:00:00.000Z",
    "2008-03-12T00:00:00.000Z",
    "2008-04-21T23:00:00.000Z",
    "2010-01-09T00:00:00.000Z",
    "2010-02-08T00:00:00.000Z",
    "2010-03-25T00:00:00.000Z",
    "2010-05-18T23:00:00.000Z",
    "2010-10-13T23:00:00.000Z",
    "2012-02-23T00:00:00.000Z",
    "2012-07-04T23:00:00.000Z",
    "2012-11-02T00:00:00.000Z",
    "2012-11-04T00:00:00.000Z",
    "2013-02-04T00:00:00.000Z",
    "2013-05-07T23:00:00.000Z",
    "2013-05-30T23:00:00.000Z",
    "2013-06-03T23:00:00.000Z",
    "2013-07-18T23:00:00.000Z",
    "2013-09-09T23:00:00.000Z",
    "2013-09-18T23:00:00.000Z",
    "2014-04-09T23:00:00.000Z",
    "2014-08-27T23:00:00.000Z",
    "2014-09-26T23:00:00.000Z",
    "2015-02-22T00:00:00.000Z",
    "2015-02-23T00:00:00.000Z",
    "2015-09-28T23:00:00.000Z",
    "2015-11-24T00:00:00.000Z",
    "2015-12-28T00:00:00.000Z",
    "2016-04-26T23:00:00.000Z",
    "2016-07-04T23:00:00.000Z",
    "2017-03-25T00:00:00.000Z",
    "2017-07-09T23:00:00.000Z",
    "2017-10-24T23:00:00.000Z",
    "2017-11-02T00:00:00.000Z",
    "2017-11-03T00:00:00.000Z",
    "2017-11-23T00:00:00.000Z",
    "2017-12-12T00:00:00.000Z",
    "2018-01-08T00:00:00.000Z",
    "2018-04-29T23:00:00.000Z",
    "2018-07-02T23:00:00.000Z",
    "2018-07-11T23:00:00.000Z",
    "2018-07-13T23:00:00.000Z",
    "2018-07-23T23:00:00.000Z",
    "2018-08-29T23:00:00.000Z",
    "2018-11-21T00:00:00.000Z",
    "2018-12-06T00:00:00.000Z",
    "2018-12-12T00:00:00.000Z",
    "2018-12-19T00:00:00.000Z",
    "2019-02-18T00:00:00.000Z",
    "2019-02-19T00:00:00.000Z",
    "2019-02-20T00:00:00.000Z",
    "2019-02-22T00:00:00.000Z",
    "2019-02-27T00:00:00.000Z",
    "2019-03-31T23:00:00.000Z",
    "2019-06-03T23:00:00.000Z",
    "2019-06-12T23:00:00.000Z",
    "2019-06-25T23:00:00.000Z",
    "2019-06-27T23:00:00.000Z",
    "2019-07-09T23:00:00.000Z",
    "2019-07-21T23:00:00.000Z",
    "2019-08-13T23:00:00.000Z",
    "2019-09-02T23:00:00.000Z",
    "2019-09-04T23:00:00.000Z",
    "2019-09-06T23:00:00.000Z",
    "2019-09-13T23:00:00.000Z",
    "2019-09-21T23:00:00.000Z",
    "2019-10-06T23:00:00.000Z",
    "2019-10-06T23:00:00.000Z",
    "2019-10-15T23:00:00.000Z",
    "2019-10-20T23:00:00.000Z",
    "2019-10-29T00:00:00.000Z",
    "2019-10-31T00:00:00.000Z",
    "2019-12-13T00:00:00.000Z",
    "2020-05-22T23:00:00.000Z",
    "2020-06-01T23:00:00.000Z",
    "2020-07-14T23:00:00.000Z",
    "2020-09-27T23:00:00.000Z",
    "2020-09-30T23:00:00.000Z",
    "2020-10-29T00:00:00.000Z",
    "2020-12-30T00:00:00.000Z",
    "2021-03-27T00:00:00.000Z",
    "2021-03-28T00:00:00.000Z",
    "2021-05-24T23:00:00.000Z",
    "2021-06-17T23:00:00.000Z",
    "2022-01-12T00:00:00.000Z",
    "2022-01-19T00:00:00.000Z",
    "2022-02-11T00:00:00.000Z",
    "2022-04-01T23:00:00.000Z",
    "2022-04-28T23:00:00.000Z",
    "2022-05-11T23:00:00.000Z",
    "2022-06-25T23:00:00.000Z",
    "2022-06-30T23:00:00.000Z",
    "2022-07-18T23:00:00.000Z",
    "2022-09-06T23:00:00.000Z",
    "2022-09-26T23:00:00.000Z",
    "2022-10-06T23:00:00.000Z",
    "2022-10-12T23:00:00.000Z",
    "2022-10-13T23:00:00.000Z",
    "2022-10-20T23:00:00.000Z",
    "2022-11-01T00:00:00.000Z",
    "2022-12-03T00:00:00.000Z",
    "2022-12-07T00:00:00.000Z",
    "2022-12-29T00:00:00.000Z",
    "2023-01-11T00:00:00.000Z",
    "2023-03-03T00:00:00.000Z",
    "2023-04-04T23:00:00.000Z",
    "2023-04-22T23:00:00.000Z",
    "2023-05-09T23:00:00.000Z",
    "2023-05-23T23:00:00.000Z",
    "2023-05-31T23:00:00.000Z",
    "2023-06-08T23:00:00.000Z",
    "2023-07-04T23:00:00.000Z",
    "2023-10-11T23:00:00.000Z",
    "2023-10-17T23:00:00.000Z",
    "2023-10-25T23:00:00.000Z",
    "2023-10-30T00:00:00.000Z",
    "2023-11-04T00:00:00.000Z",
    "2023-12-20T00:00:00.000Z",
    "2024-01-05T00:00:00.000Z",
    "2024-01-28T00:00:00.000Z",
    "2024-02-01T00:00:00.000Z",
    "2024-02-24T00:00:00.000Z",
    "2024-03-11T00:00:00.000Z",
    "2024-03-13T00:00:00.000Z",
    "2024-03-29T00:00:00.000Z",
    "2024-04-08T23:00:00.000Z",
    "2024-04-11T23:00:00.000Z",
    "2024-04-16T23:00:00.000Z",
    "2024-04-26T23:00:00.000Z",
    "2024-05-07T23:00:00.000Z",
    "2024-05-07T23:00:00.000Z",
    "2024-05-23T23:00:00.000Z",
    "2024-05-23T23:00:00.000Z",
    "2024-05-26T23:00:00.000Z",
    "2024-05-27T23:00:00.000Z",
    "2024-07-22T23:00:00.000Z",
    "2024-09-27T23:00:00.000Z",
]

const QUESTION_START = parseISO('2024-10-15')
const QUESTION_END = parseISO('2025-01-01')
const QUESTION_DAYS = differenceInDays(QUESTION_END, QUESTION_START)

const DATA_START = parseISO('2001-12-01')
const DATA_END = parseISO('2024-10-01')
const DATA_DAYS = differenceInDays(DATA_END, DATA_START)

function randomInt(max) {
  return randomBytes(4).readUInt32BE(0) % max
}

function randomDateInRange() {
  // if we allow sampling the last QUESTION_DAYS in the window, we'll bias low because there's no data from the future yet
  return addDays(DATA_START, randomInt(DATA_DAYS - QUESTION_DAYS))
}

function sim() {
  const sampleDate = randomDateInRange()
  const end = addDays(sampleDate, QUESTION_DAYS)
  const matched = dates.filter(date => { return isAfter(date, sampleDate) && isBefore(date, end) })
  return matched.length > 0
}

const SIM_COUNT = 10000

const sims = Array.from({ length: SIM_COUNT}).map(sim)

console.log(sims.filter(Boolean).length / SIM_COUNT)
